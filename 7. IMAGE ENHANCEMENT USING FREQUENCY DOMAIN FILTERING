Perform Two-dimensional discrete Fourier transform using ‘Sobel’ operator
I=imread ('rice.png');
hz=fspecial ('sobel');
PQ=paddedsize (size(I));
%Performing Fourier Transform
A=fft2 (double(hz), PQ(1), PQ(2));
B=fft2 (double(I),PQ(1),PQ(2));
FDF=A.*B;
%Performing Inverse Fourier Transform
fdf=ifft2 (FDF);
fdf=fdf (1:size(I,1),1:size(I,2));
figure, imshow (I);
figure, imshow(fdf,[]);
figure, imshow(abs(fdf), []);
figure, imshow(abs(fdf) > 0.2*abs(max(fdf(:))));
Note: The above program run with help of separate M-files (paddedsize) which is called in the program.



OUTPUT










         
Perform smoothing process using Low Pass filter in frequency domain
clear all;
close all;
football=imread ('football.jpg');
football=footBall (:,:,1); % Grab only the Red component to fake gray scaling
PQ = paddedsize (size(footBall));
D0 = 0.05*PQ(1);
H = lpfilter ('gaussian', PQ(1), PQ(2), D0); % Calculate the LPF
F=fft2 (double(footBall),size(H,1),size(H,2)); % Calculate the discrete Fourier transform of the image
LPF_football=real (ifft2(H.*F)); % multiply the Fourier spectrum by the LPF and apply the inverse, discrete Fourier transform
LPF_football=LPF_football (1:size(footBall,1), 1:size(footBall,2)); % Resize the image to undo padding
figure;
imshow (footBall)
title ('Orginal Image')
figure;
imshow (LPF_football, [])
title ('Filtering using Low Pass Filter')
Note: The above program run with help of two separate M-files (lpfilter.m and dftuv.m) which is called in the program

OUTPUT
   








Perform smoothing process using High Pass filter in frequency domain
clc;
clear all;
close all;
footBall=imread('football.jpg');
footBall=footBall(:,:,1); % Grab only the Red component to fake gray scaling
PQ = paddedsize(size(footBall));
D0 = 0.05*PQ(1);
H = hpfilter('gaussian', PQ(1), PQ(2), D0); % Calculate the HPF
F=fft2(double(footBall),size(H,1),size(H,2)); % Calculate the discrete Fourier transform of the image
HPF_football=real(ifft2(H.*F)); % multiply the Fourier spectrum by the LPF and apply the inverse, discrete Fourier transform
HPF_football=HPF_football(1:size(footBall,1), 1:size(footBall,2)); % Resize the image to undo padding
figure;
imshow(footBall)
title('Orginal Image')
figure;
imshow(HPF_football, [])
title('Filtering using High Pass Filter')
Note: The above program run with help of two separate M-files (hpfilter.m and dftuv.m) which is called in the program

OUTPUT


     






Annexure (M File): 
 Paddedsize.m File
function PQ = paddedsize(AB, CD, PARAM)
if nargin == 1
   PQ = 2*AB;
elseif nargin == 2 & ~ischar(CD)
   PQ = AB + CD - 1;
   PQ = 2 * ceil(PQ / 2);
elseif nargin == 2
   m = max(AB); % Maximum dimension.
 
   % Find power-of-2 at least twice m.
   P = 2^nextpow2(2*m);
   PQ = [P, P];
elseif nargin == 3
   m = max([AB CD]); %Maximum dimension.
   P = 2^nextpow2(2*m);
   PQ = [P, P];
else
   error('Wrong number of inputs.')
end

 dftuv.m file
function [U, V] = dftuv(M, N)
%DFTUV Computes meshgrid frequency matrices.
%   [U, V] = DFTUV(M, N) computes meshgrid frequency matrices U and
%   V. U and V are useful for computing frequency-domain filter 
%   functions that can be used with DFTFILT.  U and V are both M-by-N.
 % Set up range of variables.
u = 0:(M-1);
v = 0:(N-1);

 % Compute the indices for use in meshgrid
idx = find(u > M/2);
u(idx) = u(idx) - M;
idy = find(v > N/2);
v(idy) = v(idy) - N;
 % Compute the meshgrid arrays
[V, U] = meshgrid(v, u);
 lpfilter.m file
function H = lpfilter(type, M, N, D0, n)
[U, V] = dftuv(M, N);
 
% Compute the distances D(U, V).
D = sqrt(U.^2 + V.^2);
 
% Begin fiter computations.
switch type
case 'ideal'
   H = double(D <=D0);
case 'btw'
   if nargin == 4
      n = 1;
   end
   H = 1./(1 + (D./D0).^(2*n));
case 'gaussian'
   H = exp(-(D.^2)./(2*(D0^2)));
otherwise
   error('Unknown filter type.')
end
 hpfilter.m file
function H = hpfilter(type, M, N, D0, n)
%HPFILTER Computes frequency domain highpass filters
if nargin == 4
   n = 1; % Default value of n.
end
 % Generate highpass filter.
Hlp = lpfilter(type, M, N, D0, n);
H = 1 - Hlp;



